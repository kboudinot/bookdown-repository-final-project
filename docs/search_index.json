[["index.html", "Exploring gray wolf harvest in Idaho Chapter 1 Gray wolves 1.1 Study area 1.2 Institution", " Exploring gray wolf harvest in Idaho Koryna Boudinot 2024-12-05 Chapter 1 Gray wolves Figure 1.1: Wolf howling (Photo credit: P. Rebholz) Gray wolves (Canis lupus) historically existed in Idaho until they were extirpated due to human persecution in the early 20th century. Gray wolves were reintroduced to Yellowstone National Park, Wyoming, and central Idaho in 1995-1996. Regulated harvest is relatively new for gray wolves in the United States. These populations have expanded leading to removal of the Endangered Species Act protections in 2009. Harvest of wolves began after ESA protections were removed in the Northern Rocky Mountains (Idaho, Montana, and Wyoming). 1.1 Study area This data was collected from across Idaho, USA (Figure 1.2) Figure 1.2: Map of Idaho with GMUs Wolves are harvested with methods including hunting and trapping (Figure 1.3). Figure 1.3: Old trap To determine the effects of hunting and trapping on gray wolves we use a combination of fieldwork (Figure 1.4) and genetic data sometimes collected as scat (Figure 1.5). Figure 1.4: Surveying for wolves Figure 1.5: Freshest wolf scat I’ve ever seen 1.2 Institution This data was collected and compiled by the Idaho Department of Fish and Game and the University of Idaho Gray Wolf Research Group (Figure 1.6) Figure 1.6: Gray Wolf Research Group "],["database-creation.html", "Chapter 2 Database Creation 2.1 Load packages and initiate database 2.2 Create WOLF_ID table 2.3 Create HARVEST table 2.4 Create LIFE HISTORY table 2.5 Check data", " Chapter 2 Database Creation Data for this project was collected from harvest data from IDFG and individual wolf ID data from field monitoring. A database was created using Program R and SQL (Figure 2.1). Figure 2.1: Database design To recreate this database, simply execute the code below. 2.1 Load packages and initiate database # Load packages library(DBI) library(RSQLite) # Create database wolf &lt;- dbConnect(SQLite(),&quot;wolf.db&quot;) 2.2 Create WOLF_ID table The wolf_id table includes the UI ID (primary key) and mortality ID. # First table dbExecute(wolf_db,&quot;CREATE TABLE wolf_id ( UI_ID varchar NOT NULL PRIMARY KEY, mort_tag real);&quot;) # Load csv wolf_id &lt;- read.csv(&quot;wolf_identification.csv&quot;) # Check names names(wolf_id) # Crite csv into sql table dbWriteTable(wolf, &quot;wolf_id&quot;, wolf_id, append = T) 2.3 Create HARVEST table This table contains harvest data including the mortality ID (primary key), sex, age, mortality agent, kill date, harvest year, GMU, kill location, age estimate, days hunted, DNA taken, latitude, longitude, method, pelt number, radio collar, region, whether wolves were seen, tooth taken, and harvest weapon. # Second table dbExecute(wolf, &quot;CREATE TABLE harvest ( mort_tag real NOT NULL PRIMARY KEY, sex varchar, age real, mortality_agent varchar, kill_date date, harvest_year varchar, GMU varchar, kill_location varchar, age_estimate varchar, days_hunted real, DNA_taken varchar, latitude varchar, longitude varchar, method varchar, pelt_number real, radio_collar varchar, region real, saw_wolves varchar, tooth_taken varchar, weapon varchar FOREIGN KEY (mort_tag) REFERENCES wolf_id(mort_tag) );&quot;) # Load csv harvest_data &lt;- read.csv(&quot;harvest_data.csv&quot;) # Check that names align names(harvest_data) # Write csv into sql table dbWriteTable(wolf, &quot;harvest&quot;, harvest_data, append = T) 2.4 Create LIFE HISTORY table This life history table contains the UI ID, sex, natal pack, packs, GMU, pedigree, region and disperser. # Third table dbExecute(wolf, &quot;CREATE TABLE life_history ( UI_ID varchar NOT NULL PRIMARY KEY, sex varchar, natal_pack varchar, pack_1 varchar, pack_2 varchar, pack_3 varchar, GMU varchar, pedigree varchar, region varchar, disperser varchar FOREIGN KEY (UI_ID) REFERENCES wolf_identification(UI_ID) );&quot;) # Load csv life_history_data &lt;- read.csv(&quot;life_history_data.csv&quot;) # Check that names align names(life_history_data) # Write csv into sql table dbWriteTable(wolf, &quot;life_history&quot;, life_history_data, append = T) 2.5 Check data You should then be able to run this code to check the data. # Load libraries library(DBI) library(RSQLite) # Connect to database wolf &lt;- dbConnect(SQLite(), &quot;wolf.db&quot;) # Check each table dbGetQuery(wolf, &quot;SELECT * FROM wolf_id LIMIT 3;&quot;) dbGetQuery(wolf, &quot;SELECT * FROM harvest LIMIT 3;&quot;) dbGetQuery(wolf, &quot;SELECT * FROM life_history LIMIT 3;&quot;) "],["data-exploration.html", "Chapter 3 Data exploration 3.1 Summary statistics 3.2 Data visualization", " Chapter 3 Data exploration 3.1 Summary statistics How many wolves in the data set were harvested? wolf_id %&gt;% summarise(total_wolves = n_distinct(UI_ID), total_wolves_harvested = sum(mort_tag != &quot;&quot; &amp; !is.na(mort_tag))) %&gt;% tidyr::pivot_longer(cols = everything(), names_to = &quot;category&quot;, values_to = &quot;count&quot;) ## # A tibble: 2 × 2 ## category count ## &lt;chr&gt; &lt;int&gt; ## 1 total_wolves 2586 ## 2 total_wolves_harvested 1585 1585 wolves were harvested, according to this database. 3.2 Data visualization Here I use ggplot to create reproducible graphs using different elements of the wolf harvest data. 3.2.1 How many wolves were harvested each year? harvest %&gt;% group_by(harvest_year) %&gt;% summarise(animals_harvested = n()) %&gt;% filter(harvest_year !=2021) %&gt;% ggplot(aes(x = factor(harvest_year), y = animals_harvested)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;gray&quot;) + geom_smooth(method = &quot;lm&quot;, aes(group = 1), color = &quot;black&quot;, se = FALSE) + labs(x = &quot;Year&quot;, y = &quot;Count&quot;) + theme_minimal() ## `geom_smooth()` using formula = &#39;y ~ x&#39; 3.2.2 How many wolves were harvested by trapping each year? harvest %&gt;% filter(mortality_agent == &quot;Trapping&quot;, harvest_year != 2021) %&gt;% count(harvest_year, mortality_agent) %&gt;% ggplot(aes(x = factor(harvest_year), y = n, fill = factor(harvest_year))) + geom_bar(stat = &quot;identity&quot;, show.legend = F, fill = &quot;gray&quot;) + labs(x = &quot;Year&quot;, y = &quot;Count&quot;) + theme_minimal() 3.2.3 What were the mortality agents in 2020? harvest %&gt;% filter(harvest_year == 2020) %&gt;% count(mortality_agent) %&gt;% ggplot(aes(x = reorder(mortality_agent, n), y = n, fill = mortality_agent)) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE, fill = &quot;gray&quot;) + labs(x = &quot;Mortality agent&quot;, y = &quot;Count&quot;) + theme_minimal() 3.2.4 What methods of harvest were used in 2020? harvest %&gt;% filter(harvest_year == 2020) %&gt;% count(Method) %&gt;% ggplot(aes(x = reorder(Method, n), y = n, fill = Method)) + geom_bar(stat = &quot;identity&quot;, show.legend = F, fill = &quot;gray&quot;) + labs(x = &quot;Harvest Method&quot;, y = &quot;Count&quot;) + theme_minimal() 3.2.5 What harvest weapons were used in 2020? harvest %&gt;% filter(harvest_year == 2020) %&gt;% count(Weapon) %&gt;% ggplot(aes(x = reorder(Weapon, n), y = n, fill = Weapon)) + geom_bar(stat = &quot;identity&quot;, show.legend = F, fill = &quot;gray&quot;) + labs(x = &quot;Weapon&quot;, y = &quot;Count&quot;) + theme_minimal() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
